const ProgressBar = require('progress');
const axios = require('axios');
const download = require('download');
const chunk = require('lodash/chunk');
const fs = require('fs');
const u = require('../../u');


const urls = {
//   "26778": "122-123",
// "26777": "第136話",
// "26776": "第135話",
// "26775": "第134話",
// "26774": "第133話",
// "26773": "第132話",
// "26772": "第131話",
// "26771": "第130話",
// "26770": "第129話",
// "26769": "第128話",
// "26768": "第127話",
// "26767": "第126話",
// "26766": "第125話",
// "26765": "第124話",
// "26764": "第121話",
// "26763": "第120話",
// "26762": "第119話",
// "26761": "第118話",
// "26760": "第117話",
// "26759": "第116話",
// "26758": "第115話",
// "26757": "第114話",
// "26756": "第113話",
// "26755": "第112話",
// "26754": "第111話",
// "26753": "第110話",
// "26752": "第109話",
// "26751": "第108話",
// "26750": "第107話",
// "26749": "第106話",
// "26748": "第105話",
// "26747": "第104話",
// "26746": "第103話",
// "26745": "第102話",
// "26744": "第101話",
// "26743": "第100話",
// "26742": "第99話",
// "26741": "第98話",
// "26740": "第97話",
// "26739": "第96話",
// "26738": "第95話",
// "26737": "第94話",
// "26736": "第93話",
// "26735": "第92話",
// "26734": "第91話",
// "26733": "第90話",
// "26732": "第89話",
// "26731": "第88話",
// "26730": "第87話",
// "26729": "第86話",
// "26728": "第85話",
// "26727": "第84話",
// "26726": "第83話",
// "26725": "第82話",
// "26724": "番外篇",
// "26723": "第81話",
// "26722": "第80話",
// "26721": "第79話",
// "26720": "第78話",
// "26719": "第77話",
// "26718": "第76話",
// "26717": "第75話",
// "26716": "第74話",
// "26715": "第73話",
// "26714": "第72話",
// "26713": "第71話",
// "26712": "第69話",
// "26711": "第68話",
// "26710": "第51話",
// "26709": "第50話",
// "26708": "第49話",
// "26707": "第48話",
// "26706": "第47話",
// "26705": "第46話",
// "26704": "第45話",
// "26703": "第44話",
// "26702": "第43話",
// "26701": "第42話",
// "26700": "第41話",
// "26699": "第40話",
// "26698": "第39話",
// "26697": "第38話",
// "26696": "第37話",
// "26695": "第36話",
// "26694": "第35話",
// "26693": "第34話",
// "26692": "第33話",
// "26691": "第32話",
// "26690": "第31話",
// "26689": "第30話",
// "26688": "第29話",
// "26687": "第28話",
// "26686": "第27話",
// "26685": "第26話",
// "26684": "第25話",
// "26683": "第24話",
// "26682": "第23話",
// "26681": "第22話",
// "26680": "第21話",
// "26679": "第20話",
// "26678": "第19話",
// "26677": "第18話",
// "26676": "第17話",
// "26675": "第16話",
// "26674": "第15話",
// "26673": "第14話",
// "26672": "第13話",
// "26671": "第12話",
// "26670": "第11話",
// "26669": "第10卷",
// "26668": "第10話",
// "26667": "第9卷",
// "26666": "第9話",
"26665": "第8話",
// "26664": "第7話",
// "26663": "第6話",
// "26662": "第5話",
// "26661": "第4話",
// "26660": "第3話",
// "26659": "第2話",
// "26658": "第1話",

//   "158471": "第181話",
// "156660": "第180話",
// "154242": "第179話",
// "153207": "第178話",
// "153100": "第177話",
// "151498": "第176話",
// "150606": "第175話",
// "149680": "第174話",
// "148798": "第173話",
// "147815": "第172話",
// "146842": "第171話",
// "145851": "第170話",
// "144970": "第169話",
// "144103": "第168話",
// "143276": "第167話",
// "141544": "第166話",
// "140598": "第165話",
// "139739": "第164話",
// "138844": "第163話",
// "137828": "第162話",
// "134540": "第161話",
// "133371": "第160話",
// "131411": "第159話",
// "130420": "第158話",
// "129383": "第157話",
// "128545": "第156話",
// "126828": "第155話",
// "125902": "第154話",
// "124404": "第153話",
// "123035": "第152話",
// "121127": "第151話",
// "120295": "第150話",
// "119393": "第149話",
// "116580": "第148話",
// "114943": "第147話",
// "114134": "第146話",
// "113464": "第145話",
// "112906": "第144話",
// "112431": "第143話",
// "110304": "第142話",
// "109197": "第141話",
// "109196": "第140話",
// "109195": "第139話",
// "109194": "第138話",
// "109193": "第137話",
// "109192": "第136話",
// "109191": "第135話",
// "109190": "第134話",
// "109189": "第133話",
// "109188": "第132話",
// "109187": "第131話",
// "109186": "第130話",
// "109185": "第129話",
// "109184": "第128話",
// "109183": "第127話",
// "109182": "第126話",
// "109181": "第125話",
// "109180": "第124話",
// "109131": "第123話",
// "109130": "第122話",
// "109129": "第121話",
// "109128": "第120話",
// "109127": "第119話",
// "109126": "第118話",
// "109125": "第117話",
// "109124": "第116話",
// "109123": "第115話",
// "109122": "第114話",
// "109121": "第113話",
// "109120": "第112話",
// "109119": "第111話",
// "109118": "第110話",
// "109117": "第109話",
// "107918": "第108話",
// "107917": "第107話",
// "107916": "第106話",
// "107915": "第105話",
// "109101": "第104話",
// "109100": "第103話",
// "109099": "第102話",
// "109098": "第101話",
// "109097": "第100話",
// "109096": "第99話",
// "109095": "第98話",
// "109094": "第97話",
// "109093": "第96話",
// "109092": "第95話",
// "109091": "第94話",
// "109090": "第93話",
// "109089": "第92話",
// "109088": "第91話",
// "109087": "第90話",
// "109086": "第89話",
// "109085": "第88話",
// "109084": "第87話",
// "109083": "第86話",
// "109082": "第85話",
// "109081": "第84話",
// "109080": "第83話",
// "109079": "第82話",
// "109078": "第81話",
// "109077": "第80話",
// "109076": "第79話",
// "109075": "第78話",
// "109074": "第77話",
// "109073": "第76話",
// "109072": "第75話",
// "109071": "第74話",
// "109070": "第73話",
// "109069": "第72話",
// "109068": "第71話",
// "109067": "第70話",
// "109066": "第69話",
// "109065": "第68話",
// "109064": "第67話",
// "109063": "第66話",
// "109062": "第65話",
// "109061": "第64話",
// "109060": "第63話",
// "109059": "第62話",
// "109058": "第61話",
// "109057": "第60話",
// "109053": "第59話",
// "109052": "第58話",
// "109051": "第57話",
// "109049": "第56話",
// "109048": "第55話",
// "109047": "第54話",
// "109046": "第53話",
// "109045": "第52話",
// "109044": "第51話",
// "109043": "第50話",
// "109042": "第49話",
// "109041": "第48話",
// "109040": "第47話",
// "109039": "第46話",
// "109038": "第45話",
// "109037": "第44話",
// "109036": "第43話",
// "109035": "第42話",
// "109034": "第41話",
// "109033": "第40話",
// "109032": "第38話",
// "109031": "第37話",
// "109030": "第36話",
// "109029": "第35話",
// "109028": "第34話",
// "109027": "第33話",
// "109026": "第32話",
// "109025": "第31話",
// "109024": "第30話",
// "109023": "第29話",
// "109022": "第28話",
// "109021": "第27話",
// "109020": "第26話",
// "109019": "第25話",
// "109018": "第24話",
// "109017": "第23話",
// "109016": "第22話",
// "109015": "第21話",
// "109014": "第20話",
// "109013": "第19話",
// "109012": "第18話",
// "109011": "第17話",
// "109010": "第16話",
// "109009": "第15話",
// "109008": "第14話",
// "109007": "第13話",
// "109006": "第12話",
// "109005": "第11話",
// "109004": "第10話",
// "109003": "第9話",
// "109002": "第8話",
// "109001": "第7話",
// "109000": "第6話",
// "108999": "第5話",
// "108998": "第4話",
// "108997": "第3話",
// "108996": "第2話",
// "108995": "第1話",
}

const url2 = [

]

module.exports = (app) => {
  return {
    async index() {
      const { ctx } = this;
      for(const url of url2){
        const host = `http://www.qiman6.com/${url}`;
        await axios({
          url: host,
          method: 'get',
          headers: {
            Referer: host
          }
        }).then(async (res) => {
          const title = res.data.split('<h1 class="chaptername_title">')[1].split('</h1>')[0];
          const text = res.data.split('eval(')[1].split(')\n')[0];
          eval('global.func = ' + text);
          eval(global.func);

          let i = 1;
          let arr = [];
          for(let src of newImgs){
            arr.push({
              url: src,
              path: `../石纪元/${title}/`,
              page: i
            })
            i++;
          }
          console.log(arr, title, newImgs.length);
          await service(arr, title, newImgs.length, 20)
          console.log(`${title}:完成`);
          console.log(url)
        })
      }
      ctx.body = ''
    },

    async other() {
      const { ctx } = this;
      let i = 0;
      while(i <= 77){
        let j = 1;
        const url = `https://twocomic.com/view/comic_7244.html?ch=${i}-${j}`;
        const {page} = u(j, url);
        const arr = [];
        while(j <= page){
          const url = `https://twocomic.com/view/comic_7244.html?ch=${i}-${j}`;
          const {img} = u(j, url);
          arr.push({
            url: img,
            path: `../出包女王/第${i}话/`,
            page: j.toString()
          })
          j++;
        }
        // console.log(arr, i, page)
        const res = await service(arr, `第${i}话`, page, 20)
        console.log(res)
        i++;
      }
      
      ctx.body = ''
    },


    async a() {
      const { ctx } = this;
      for(const id in urls){
        const host = `http://mangabz.com/m${id}`;
        const res = await axios({
          url: host,
          method: 'get',
          headers: {
            "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1",
            // Referer: host
          }
        })
          console.log(host)
          const title = urls[id];
          const text = res.data.split('eval(')[1].split(')\n')[0];
          eval('global.func = ' + text);
          eval(global.func);
          let i = 1;
          let arr = [];
          for(let src of newImgs){
            arr.push({
              url: src,
              path: `../天山天下/${title}/`,
              page: i
            })
            i++;
          }
          await service(arr, title, newImgs.length, 20)
          console.log(`${title}:完成`);
      }
      ctx.body = '111'
    },
  };
};




async function service(arr, title, total, max) {
  const bar = new ProgressBar(`${title}(共${total}页): [:bar] [:percent]`, { total: +total, width: 50, clear: true });
  const newArr = chunk(arr, max);
  console.log(newArr)
    for(const list of newArr){

          const p = list.map(({url, path, page}) => {
          url = url.indexOf('http') === -1 ? `http:${url}` : url;
          return axios({
              url,
              method: 'get',
              responseType: "arraybuffer",
              headers: {
                'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',
                'cache-control': 'no-cache',
                accept: 'image/webp,image/apng,image/*,*/*;q=0.8'
              }
            }).then(res => {
              if(!fs.existsSync(path)){
                fs.mkdirSync(path)
              }
              fs.writeFileSync(`${path}${page}.jpg`, res.data, 'binary')
              bar.tick(1);  //进度步长
         
            }).catch(e => {
              console.log(e.message)
            })
          })
        await Promise.all(p)
      // let p = list.map(({url, path, page}) => {
      //   console.log(url);
      //   return download(url, path, {filename: `${page}.jpg`}).then(() => {;bar.tick(1)})
      // });
      // await Promise.all(p)
    }
    return title
  
}
